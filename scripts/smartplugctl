#!/usr/bin/env python

# smartPlug AWOX control with Bluez
#
# Control an AWOX smartPlug (BLE electrical plug with relay) from command line
# sample: './smart_plug_ctl.py 98:7B:F3:34:78:52 on' to turn on the plug
#
# needs: bluez and python bluepy module
#
# license: MIT

from __future__ import print_function
import sys
import argparse
from pySmartPlugSmpB16 import SmartPlug, btle

# parse args
parser = argparse.ArgumentParser()
parser.add_argument('ble_addr', type=str, 
                    help='plug bluetooth LE address (like 98:7b:f3:34:78:52)')
parser.add_argument('command', type=str, choices=['on', 'off', 'status'],
                    help='command to send at plug')
args = parser.parse_args()

# connect to the plug (BLE connect)
try:
    plug = SmartPlug(args.ble_addr)
except btle.BTLEException as err:
    sys.exit('error when connect to %s (code %d)' % (args.ble_addr, err.code))

# set plug on/off
if args.command == 'on':
    try:
        is_ok = plug.on()
    except btle.BTLEException as err:
        sys.exit('error when setting plug %s on (code %d)' % (args.ble_addr, err.code))
    if is_ok:
        print('smartPlug is set on')
    else:
        sys.exit('unable to set smartPlug on')
elif args.command == 'off':
    try:
        is_ok = plug.off()
    except btle.BTLEException as err:
        sys.exit('error when setting plug %s off (code %d)' % (args.ble_addr, err.code))
    if is_ok:
        print('smartPlug is set off')
    else:
        sys.exit('unable to contact smartPlug')
elif args.command == 'status':
    try:
        (state, power) = plug.status_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting stat to plug %s (code %d)' % (args.ble_addr, err.code))
    # print result
    status = 'on' if state else 'off'
    print('plug state = %s' % status)
    print('plug power = %d W' % power)

# disconnect BLE
plug.disconnect()

# exit without error
sys.exit(0)

